#!/bin/bash

#Helper function that converts a set of environment variables into a comma-separated key-value list of
#variables and values. This is used to pass environment variables to qsub -v without having to type out a lot of details
#  Example: envpass qsub_allocation heudiconv_walltime
#  Result:  This will lookup the values of these variables in the environment
#           and result in something like fsl_module=mnh5174_c_g_sc_default,heudiconv_walltime=2:00:00
#  Consider whether we should be quoting the values in case they have weird characters
function envpass() {
  npar=$#
  [ $npar -eq 0 ] && return #nothing to do
  env_names=$@
  local vpass_string=
  for inputName in $env_names; do
    #check whether value contains an equals sign, in which case treat it as a verbatim key-value pair
    if [[ "$inputName" == *"="* ]]; then
      vpass_string="$vpass_string'$inputName',"
    else
      inputVal=${!inputName}
      [ -z "${inputVal}" ] && echo "$inputName is empty" # && exit 1
      vpass_string="$vpass_string$inputName='$inputVal',"
    fi
  done
  vpass_string=$(echo $vpass_string | sed 's/.$//') #trim trailing comma
  echo $vpass_string
}

#looks for qsub_email and qsub_allocation in environment
#accepts positional parameters thereafter that all get converted to -l arguments
function build_qsub_string() {
  local qsub_string=
  if [ -n "$qsub_allocation" ]; then
    qsub_string="${qsub_string} -A $qsub_allocation"
  else
    qsub_string="${qsub_string} -A open" #default to open queue if not specified
  fi

  if [ -n "$qsub_email" ]; then qsub_string="${qsub_string} -M $qsub_email"; fi

  local nargs=$#
  if [ $nargs -gt 0 ]; then
    local env_names=$@
    for inputName in $env_names; do
      #check whether value contains an equals sign, in which case treat it as a verbatim key-value pair
      if [[ "$inputName" == *"="* ]]; then
        qsub_string="$qsub_string -l $inputName"
      else
        inputVal=${!inputName} #use the value of the environment variable
        if [ -n "${inputVal}" ]; then
          qsub_string="$qsub_string -l $inputName='$inputVal'"
        fi
      fi
    done
  fi
  echo $qsub_string
}

#rel is shorthand for "run, echo, log". It looks for the environment $log_file for writing output
#The first argument is a quoted command to execute.
#Additional arguments can specify how to handle the command.
# - c: "comment" -- print the command to the screen and log, but do not execute it
# - t: "timeit" -- print the command to screen and log, execute it, and include execution timing in output
# - o: "output" -- print the command to the log, but not screen, execute it, and print the command result to screen
function rel_old() {
  #function that runs, echos to terminal, and logs to file an arbitrary command
  local cmd="${1}"
  local comment=0
  local timeit=0
  local print_stdout=0
  local pipesave=""
  local cmdExit=0
  local cmdOutput=""
  local thisarg=
  local substitute=""

  if [ $# -gt 1 ]; then
    #loop over remaining arguments
    for ((i = 2; i <= $#; i++)); do
      thisarg="${!i}"
      if [[ $thisarg = c ]]; then #print but do not execute
        comment=1
      elif [[ $thisarg = t ]]; then #time execution of command
        timeit=1
      elif [[ $thisarg = o ]]; then #print the output of the command (returning it for use)
        print_stdout=1
      elif [[ $comment -eq 1 ]]; then #get value to return in place of running the command
        substitute=$thisarg
      fi

      #printf '%s\n' "Arg $i: ${!i}"
    done
  fi

  #for the function to return output to the caller, we need to suppress
  #any echo chatter in the function other than cmdOutput
  if [ $print_stdout -eq 1 ]; then
    comment=0
    timeit=0
  fi

  if [ -n "${log_file}" ]; then
    pipesave="|tee -a '$log_file'"
    if [[ $comment -eq 1 && "$cmd" != "" ]]; then
      cmd="## ${cmd}"
    fi
    echo -e "${cmd}" >>"${log_file}"
  fi

  if [ $comment -eq 0 ]; then
    #echo command to screen verbatim if we are not returning stdout
    [ $print_stdout -eq 0 ] && echo ${cmd}

    #run command
    tic=$(date +%s)
    cmdOutput=$(eval ${cmd}) #capture output of command
    cmdExit=$?
    toc=$(date +%s)
    [ $print_stdout -eq 1 ] && echo "## stdout: $cmdOutput" >>"${log_file}"
  elif [[ $substitute != "" ]]; then #print substituted/faked comand output instead of command
    echo $substitute
  else
    #echo command to screen with dashes to offset text visually
    #if a blank character string is passed as the command, just include this without dashes
    [[ "${cmd}" == "" ]] && echo "" || echo -e "----  ${cmd}"
  fi

  # how long did it take. write to file if we have a logfile
  [ $timeit -eq 1 ] && eval "echo -e \"\#\ttook $((($toc - $tic))) seconds\" $pipesave"

  [ $print_stdout -eq 1 ] && echo "$cmdOutput" #print result to screen so it can be captured by caller
  return $cmdExit                              #exit status of command
}

# rel is shorthand for "run, echo, log". It looks for the environment $log_file and will write outputs there if specified.
# Initial arguments specify what to do, including
# c: "comment"  -- print the command to the screen and log, but do not execute it
# t: "timeit"   -- print the command to screen and log, execute it, and include execution timing in output
# o: "output"   -- print the command to the log, but not screen, execute it, and print the command result to screen
# -l <log>      -- specify the location of a log file used for logging. If not specified, rel will look at $log_file
#
# After parsing these arguments, all remaining arguments are assumed to be part of the command to be run
# 
# Examples:
#   # Just write a comment to the log
#   rel c Hello this is my comment
#
#   # Time the execution of the sleep 10 command
#   rel t sleep 10
#
#   # Write to a particular log file
#   rel -l ~/my_log.txt sleep 10
function rel() {
  #function that runs, echos to terminal, and logs to file an arbitrary command
  local comment=0
  local timeit=0
  local print_stdout=0
  local pipesave=""
  local cmdExit=0       # return value of this command
  local cmdOutput=""    # stdout output of the command
  local log=""          # log file where results should be written

  [ -n "$log_file" ] && log="$log_file"

  [[ $# -eq 0 ]] && echo "No arguments to rel provided" && return 1
  while [[ $# -gt 0 ]]; do
    if [[ $1 = c ]]; then
      comment=1
      shift
    elif [[ $1 = t ]]; then
      timeit=1
      shift
    elif [[ $1 = o ]]; then
      print_stdout=1
      shift
    elif [[ $1 = -l ]]; then
      log=$2
      shift 2
    else
      break # end of argument parsing -- all remaining text is the command
    fi
  done

  local cmd="$*"
  
  #for the function to return output to the caller, we need to suppress
  #any echo chatter in the function other than cmdOutput
  if [ $print_stdout -eq 1 ]; then
    comment=0
    timeit=0
  fi

  if [ -n "$log" ]; then
    pipesave="| tee -a '$log'"
    if [[ $comment -eq 1 && "$cmd" != "" ]]; then
      cmd="## ${cmd}"
    fi
    echo -e "${cmd}" >>"${log}"
  fi

  if [ $comment -eq 0 ]; then
    #echo command to screen verbatim if we are not returning stdout
    [ $print_stdout -eq 0 ] && echo ${cmd}

    #run command
    tic=$(date +%s)
    cmdOutput=$(eval ${cmd}) #capture output of command
    cmdExit=$?
    toc=$(date +%s)
    [ $print_stdout -eq 1 ] && echo "## stdout: $cmdOutput" >>"$log"
  else
    #echo command to screen with dashes to offset text visually
    #if a blank character string is passed as the command, just include this without dashes
    [[ "${cmd}" == "" ]] && echo "" || echo -e "----  ${cmd}"
  fi

  # how long did it take. write to file if we have a logfile
  [ $timeit -eq 1 ] && eval "echo -e \"#\ttook $((($toc - $tic))) seconds\" $pipesave"

  [ $print_stdout -eq 1 ] && echo "$cmdOutput" #print result to screen so it can be captured by caller
  return $cmdExit                              #exit status of command
}

# this function extracts the jobID number from a qsub job listing and intelligently constructs the desired dependency string
# expects input like: afterok <qsub job listing> afterany <qsub job listing> ...
function build_depend_string() {
  local base="-W depend="
  local args=""
  while [[ $# -gt 0 ]]; do
    if [[ ! -z $2 && $2 != "\"\"" ]]; then
      args=${args}$(link_job_listings ${1}:${2})
    fi

    shift
    shift
  done

  args=$(echo $args | sed 's/,$//')

  if [[ -z args ]]; then
    echo ""
  else
    echo ${base}${args}
  fi
}

# parses out the pure qsub job number
# links a list of these together
# NOTE: leaves a trailing comma
function link_job_listings() {

  base=""
  for arg in $@; do
    arg=$(echo $arg | sed -e 's/\.torque01\.[a-z0-9\.]*edu//g') # get just the number
    base=${base}${arg},
  done

  #base=$(echo $base | sed -e 's/,$//')

  echo $base
}
